Parameters:
    VPCID: 
      Description: VPC Id of primary Region 
      Type: AWS::EC2::VPC::Id
      ConstraintDescription: Must be valid  VPCID and VPC must be in the primary Region
    PEERVPCID : 
      Description: VPC Id of secondary Region 
      Type: String
      ConstraintDescription: Must be valid  VPCID and VPC must be in the Peer Region
    PEERREGION:
      Type: String
      Default: us-east-2 
      ConstraintDescription: This Region must be your Peer or backup Region  
      AllowedValues:
        - us-east-2




Resources:
 VPCPeeringLambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
 GetInformationForVpcPeeringFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt VPCPeeringLambdaIAMRole.Arn
      Runtime: python3.9
      Timeout: 50
      Code:
        ZipFile: |
          import json
          import boto3
          from botocore.config import Config
          import cfnresponse


          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              VPCID=event['ResourceProperties']['VPCID']
              PEER_VPCID = event['ResourceProperties']['PEER_VPCID']
              PEER_REGION = event['ResourceProperties']['PEER_REGION']
              REGION_VPC_MainRTId = ""
              PEER_REGIONVPC_MainRTId = ""
              VPC_DatabaseSgId = ""
              PEER_VPC_DatabaseSgId = ""

                  
              PEER_REGION_CONFIG = Config(
                  region_name = PEER_REGION
              )
              
              
              client = boto3.client('ec2')
              peer_region_client = boto3.client('ec2', config=PEER_REGION_CONFIG) 
            
                  
              try: 
                  if event['RequestType'] == 'Create' or event['RequestType'] == 'Update' :
                      print("Request Type:",event['RequestType'])
                      describe_route_tables = client.describe_route_tables(
                          Filters = [
                              {
                              'Name': 'association.main',
                              'Values': [ 'true']
                              },
                              {
                              'Name': 'vpc-id',
                              'Values':[ VPCID] 
                              }
                          ]    
                      )
                      
                      REGION_VPC_MainRTId = describe_route_tables['RouteTables'][0]['RouteTableId']
                      
                      describe_route_tables = peer_region_client.describe_route_tables(
                          Filters = [
                              {
                              'Name': 'association.main',
                              'Values': [ 'true']
                              },
                              {
                              'Name': 'vpc-id',
                              'Values': [ PEER_VPCID ]
                              }
                          ]    
                      )
                      
                      PEER_REGIONVPC_MainRTId  = describe_route_tables['RouteTables'][0]['RouteTableId']  
                      
                      describe_security_groups = client.describe_security_groups(
                          Filters = [
                          {
                              'Name': "tag:Name",
                              'Values': ['DatabaseSg']
                          }    
                          ]   
                      )
                      VPC_DatabaseSgId = describe_security_groups['SecurityGroups'][0]['GroupId']        
                      
                      
                      describe_security_groups = peer_region_client.describe_security_groups(
                          Filters = [
                          {
                              'Name': "tag:Name",
                              'Values': ['DatabaseSg']
                          }    
                          ]   
                      )
                      PEER_VPC_DatabaseSgId = describe_security_groups['SecurityGroups'][0]['GroupId'] 
                      
                      responseData = {
                      'REGION_VPC_MainRTId':  REGION_VPC_MainRTId,
                      'PEER_REGIONVPC_MainRTId': PEER_REGIONVPC_MainRTId , 
                      'VPC_DatabaseSgId': VPC_DatabaseSgId ,
                      'PEER_VPC_DatabaseSgId': PEER_VPC_DatabaseSgId ,
                      
                      }
                      
                      responseStatus = 'SUCCESS'
                      print("Sending response to custom resource")
                      print(responseData)
                      cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
                      
                  elif event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      print("Delete Request - No Physical resources to delete")
                      cfnresponse.send(event, context, 'SUCCESS', {}, "CustomResourcePhysicalID")
                      
              except Exception as e:
                  print('Failed to process:')
                  print(e)
                  responseStatus = 'FAILED'
                  responseData = {'Failure': 'Something bad happened'}
                  print(responseData)
                  cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
 SetupVpcPeeringFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: GetInformationForVpcPeeringFunctionInvoke
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt VPCPeeringLambdaIAMRole.Arn
      Runtime: python3.9
      Timeout: 50
      Code:
        ZipFile: | 
            import json
            import boto3
            from botocore.config import Config
            import cfnresponse
            import time

            def lambda_handler(event, context):
                # TODO implement
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                VPCID=event['ResourceProperties']['VPCID']
                PEER_VPCID = event['ResourceProperties']['PEER_VPCID']
                PEER_REGION = event['ResourceProperties']['PEER_REGION']
                REGION_VPC_MainRTId = event['ResourceProperties']['REGION_VPC_MainRTId']
                PEER_REGIONVPC_MainRTId = event['ResourceProperties']['PEER_REGIONVPC_MainRTId']
                VPC_DatabaseSgId = event['ResourceProperties']['VPC_DatabaseSgId']
                PEER_VPC_DatabaseSgId = event['ResourceProperties']['PEER_VPC_DatabaseSgId']
                vpc01_cidrblock = ""
                vpc02_cidrblock = ""
                VpcPeeringConnectionId = ""
                    
                PEER_REGION_CONFIG = Config(
                    region_name = PEER_REGION
                )
                
                
                client = boto3.client('ec2')
                peer_region_client = boto3.client('ec2', config=PEER_REGION_CONFIG)
                
                try:
                    if event['RequestType'] == 'Create' or event['RequestType'] == 'Update' :
                        describe_vpc_peering_connections= client.describe_vpc_peering_connections(
                          Filters=[
                              {
                                  'Name': 'accepter-vpc-info.vpc-id',
                                  'Values': [
                                      PEER_VPCID,
                                  ]
                              },
                              {
                                  'Name': 'requester-vpc-info.vpc-id',
                                  'Values': [
                                      VPCID,
                                  ]
                              },
                              {
                                  'Name': 'status-code',
                                  'Values': ['active']
                              }
                          ],

                        )
                      
                        if  len(describe_vpc_peering_connections['VpcPeeringConnections']) == 0 :
                            create_vpc_peering_connection = client.create_vpc_peering_connection(
                            # DryRun = True,
                            PeerVpcId = PEER_VPCID,
                            VpcId = VPCID, 
                            PeerRegion = PEER_REGION
                        
                            ) 
                          
                            print(create_vpc_peering_connection['VpcPeeringConnection']['VpcPeeringConnectionId'])
                            
                            
                            VpcPeeringConnectionId = create_vpc_peering_connection['VpcPeeringConnection']['VpcPeeringConnectionId']
                            
                            time.sleep(10)
                            
                            accept_vpc_peering_connection  = peer_region_client.accept_vpc_peering_connection(
                                VpcPeeringConnectionId=VpcPeeringConnectionId
                            )
                            
                            print(accept_vpc_peering_connection)
                            vpc02_cidrblock = accept_vpc_peering_connection['VpcPeeringConnection']['AccepterVpcInfo']['CidrBlock'] 
                            vpc01_cidrblock = accept_vpc_peering_connection['VpcPeeringConnection']['RequesterVpcInfo']['CidrBlock']
                            
                        else:
                            print('VPC Peering Connection was already created..')
                            vpc02_cidrblock = describe_vpc_peering_connections['VpcPeeringConnections'][0]['AccepterVpcInfo']['CidrBlock'] 
                            vpc01_cidrblock = describe_vpc_peering_connections['VpcPeeringConnections'][0]['RequesterVpcInfo']['CidrBlock']
                            VpcPeeringConnectionId = describe_vpc_peering_connections['VpcPeeringConnections'][0]['VpcPeeringConnectionId']
                        
                        print(vpc02_cidrblock) 
                        print(vpc01_cidrblock)
                        print(VpcPeeringConnectionId)
                        check_security_group_rule = client.describe_security_group_rules(
                            Filters=[
                                {
                                    'Name': 'group-id',
                                    'Values': [
                                        VPC_DatabaseSgId,
                                    ]
                                },
                                {
                                    'Name': 'tag:CidrIp',
                                    'Values': [ vpc02_cidrblock ]
                                },
                                {
                                    'Name': 'tag:IpProtocol',
                                    'Values': ['-1']
                                }, 
                                {
                                    'Name': 'tag:FromPort',
                                    'Values': ['-1']
                                },
                                {
                                    'Name': 'tag:ToPort',
                                    'Values': ['-1']
                                }
                                
                            ]
                          
                            )
                        print(len(check_security_group_rule['SecurityGroupRules']))   
                        if len(check_security_group_rule['SecurityGroupRules']) == 0 :
                            authorize_security_group_ingress_for_Region1_DatabaseSg  = client.authorize_security_group_ingress(
                                    GroupId= VPC_DatabaseSgId ,
                                    CidrIp =  vpc02_cidrblock,
                                    FromPort = -1 ,
                                    ToPort = -1 ,
                                    IpProtocol = "-1",
                                    TagSpecifications = [
                                        
                                    {
                                        'ResourceType': 'security-group-rule',
                                        'Tags': [
                                            {
                                                'Key': 'CidrIp',
                                                'Value': vpc02_cidrblock 
                                            },
                                            {
                                                'Key': 'GroupId',
                                                'Value':  VPC_DatabaseSgId 
                                            }, 
                                            {
                                                'Key': 'FromPort',
                                                'Value': "-1"
                                            },
                                            {
                                                'Key': 'ToPort',
                                                'Value': "-1" 
                                            },
                                            {
                                                'Key': 'IpProtocol',
                                                'Value': '-1'
                                            }
                                        ]
                                    }
                                    ]
                            )
                        else:
                            print("Ingress Rule for {} was already created".format(vpc02_cidrblock))    
                        check_security_group_rule = peer_region_client.describe_security_group_rules(
                            Filters=[
                                {
                                    'Name': 'group-id',
                                    'Values': [
                                        PEER_VPC_DatabaseSgId,
                                    ]
                                },
                                {
                                    'Name': 'tag:CidrIp',
                                    'Values': [ vpc01_cidrblock ]
                                },
                                {
                                    'Name': 'tag:IpProtocol',
                                    'Values': ['-1']
                                }, 
                                {
                                    'Name': 'tag:FromPort',
                                    'Values': ['-1']
                                },
                                {
                                    'Name': 'tag:ToPort',
                                    'Values': ['-1']
                                }
                                
                            ]
                        )
                        print(check_security_group_rule)   
                        if len(check_security_group_rule['SecurityGroupRules']) == 0:             
                          authorize_security_group_ingress_for_Region1_DatabaseSg  = peer_region_client.authorize_security_group_ingress(
                                    GroupId= PEER_VPC_DatabaseSgId ,
                                    CidrIp = vpc01_cidrblock,
                                    FromPort = -1 ,
                                    ToPort = -1 ,
                                    IpProtocol = "-1",
                                    TagSpecifications = [
                                        
                                    {
                                        'ResourceType': 'security-group-rule',
                                        'Tags': [
                                            {
                                                'Key': 'CidrIp',
                                                'Value': vpc01_cidrblock
                                            },
                                            {
                                                'Key': 'GroupId',
                                                'Value': PEER_VPC_DatabaseSgId
                                            }, 
                                            {
                                                'Key': 'FromPort',
                                                'Value': "-1"
                                            },
                                            {
                                                'Key': 'ToPort',
                                                'Value': "-1" 
                                            },
                                            {
                                                'Key': 'IpProtocol',
                                                'Value': '-1'
                                            }
                                        ]
                                    }
                                    ]
                            )
                        else:
                          print("Ingress Rule for {} was already created".format(vpc01_cidrblock))
                        describe_route_tables = client.describe_route_tables(
                          Filters=[
                              {
                                  'Name': 'route.destination-cidr-block',
                                  'Values': [
                                      vpc02_cidrblock,
                                  ]
                              },
                              {
                                  'Name': 'route.vpc-peering-connection-id',
                                  'Values': [VpcPeeringConnectionId]
                              }, 
                              {
                                  'Name': 'route-table-id',
                                  'Values': [ REGION_VPC_MainRTId ]
                              }
                          ],
                        
                          )
                        if len(describe_route_tables['RouteTables']) == 0 : 
                            create_route_vpc_region1 = client.create_route(
                                    DestinationCidrBlock = vpc02_cidrblock,
                                    RouteTableId = REGION_VPC_MainRTId ,
                                    VpcPeeringConnectionId = VpcPeeringConnectionId
                                )
                        else:
                          print("Route entry for {} was already created".format(vpc02_cidrblock))
                        describe_route_tables = peer_region_client.describe_route_tables(
                          Filters=[
                              {
                                  'Name': 'route.destination-cidr-block',
                                  'Values': [
                                      vpc01_cidrblock,
                                  ]
                              },
                              {
                                  'Name': 'route.vpc-peering-connection-id',
                                  'Values': [VpcPeeringConnectionId]
                              }, 
                              {
                                  'Name': 'route-table-id',
                                  'Values': [ PEER_REGIONVPC_MainRTId ]
                              }
                          ],
                        
                          )
                        if len(describe_route_tables['RouteTables']) == 0 :                           
                            create_route_vpc_region2 = peer_region_client.create_route(
                                    DestinationCidrBlock = vpc01_cidrblock,
                                    RouteTableId =PEER_REGIONVPC_MainRTId,
                                    VpcPeeringConnectionId = VpcPeeringConnectionId
                                )
                        else:
                          print("Route entry for {} was already created".format(vpc01_cidrblock))
                          
                        cfnresponse.send(event, context, 'SUCCESS', {}, "CustomResourcePhysicalID")   
                      
                    elif event['RequestType'] == 'Delete' :
                        print("Request Type:",event['RequestType'])
                        describe_vpc_peering_connections= client.describe_vpc_peering_connections(
                          Filters=[
                              {
                                  'Name': 'accepter-vpc-info.vpc-id',
                                  'Values': [
                                      PEER_VPCID,
                                  ]
                              },
                              {
                                  'Name': 'requester-vpc-info.vpc-id',
                                  'Values': [
                                      VPCID,
                                  ]
                              },
                              {
                                  'Name': 'status-code',
                                  'Values': ['active']
                              }
                          ],

                        )
                        vpc02_cidrblock = describe_vpc_peering_connections['VpcPeeringConnections'][0]['AccepterVpcInfo']['CidrBlock'] 
                        vpc01_cidrblock = describe_vpc_peering_connections['VpcPeeringConnections'][0]['RequesterVpcInfo']['CidrBlock']
                        VpcPeeringConnectionId = describe_vpc_peering_connections['VpcPeeringConnections'][0]['VpcPeeringConnectionId']
                          
                        revoke_security_group_ingress_for_Region1_DatabaseSg  = client.revoke_security_group_ingress(
                                GroupId= VPC_DatabaseSgId ,
                                CidrIp = vpc02_cidrblock,
                                FromPort = -1 ,
                                ToPort = -1 ,
                                IpProtocol = "-1",
                                
                                
                        )
                        if revoke_security_group_ingress_for_Region1_DatabaseSg['Return']:
                            print("Ingress asscess for {} to {}  has been revoked".format(vpc02_cidrblock, VPC_DatabaseSgId))

                        revoke_security_group_ingress_for_Region2_DatabaseSg = peer_region_client.revoke_security_group_ingress(
                                GroupId= PEER_VPC_DatabaseSgId ,
                                CidrIp = vpc01_cidrblock,
                                FromPort = -1 ,
                                ToPort = -1 ,
                                IpProtocol = "-1" ,
                                
                            )
                        if revoke_security_group_ingress_for_Region2_DatabaseSg['Return']:
                            print("Ingress asscess for {} to {}  has been revoked".format(vpc01_cidrblock, PEER_VPC_DatabaseSgId))  

                        print("Deleting route for Local Region Main Route Table" )
                        delete_route_vpc_region1 = client.delete_route(
                                DestinationCidrBlock = vpc02_cidrblock,
                                RouteTableId = REGION_VPC_MainRTId ,
                              
                            )
                        print("Deleting route for Peer Region Main Route Table")
                        delete_route_vpc_region2 = peer_region_client.delete_route(
                                DestinationCidrBlock = vpc01_cidrblock,
                                RouteTableId =PEER_REGIONVPC_MainRTId,
                          
                            )     
                        

                        print('Deleting VPC Peering Connection')
                
                        VpcPeeringConnectionId = describe_vpc_peering_connections['VpcPeeringConnections'][0]['VpcPeeringConnectionId']
                        delete_vpc_peering_connection = client.delete_vpc_peering_connection(
                            VpcPeeringConnectionId=VpcPeeringConnectionId
                        )
                        if delete_vpc_peering_connection['Return'] :
                            print("Deleting VPC Peering Connection was Successful.")
                        cfnresponse.send(event, context, 'SUCCESS', {}, "CustomResourcePhysicalID")                       

                except Exception as e:
                    print('Failed to process:')
                    print(e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened'}
                    print(responseData)
                    cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")

 GetInformationForVpcPeeringFunctionInvoke:
    Type: 'Custom::GetInformationForVpcPeering'
    Properties:
      ServiceToken: !GetAtt GetInformationForVpcPeeringFunction.Arn
      VPCID: !Ref VPCID
      PEER_VPCID : !Ref  PEERVPCID
      PEER_REGION : !Ref  PEERREGION

 SetupVpcPeeringFunctionInvoke:
    Type: 'Custom::SetupVpcPeeringFunction'
    Properties:
      ServiceToken: !GetAtt SetupVpcPeeringFunction.Arn
      VPCID: !Ref VPCID
      PEER_VPCID : !Ref  PEERVPCID
      PEER_REGION : !Ref  PEERREGION
      REGION_VPC_MainRTId: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.REGION_VPC_MainRTId
      PEER_REGIONVPC_MainRTId: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.PEER_REGIONVPC_MainRTId
      VPC_DatabaseSgId: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.VPC_DatabaseSgId
      PEER_VPC_DatabaseSgId: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.PEER_VPC_DatabaseSgId

Outputs:
  VPCID: 
    Value: !Ref VPCID 
  PEERVPCID: 
    Value: !Ref PEERVPCID
  PEERREGION: 
    Value: !Ref PEERREGION
  REGIONVPCMAINRTID: 
    Value: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.REGION_VPC_MainRTId
  PEERREGIONVPCMAINRTID: 
    Value: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.PEER_REGIONVPC_MainRTId
  VPCDATABASESGID:
    Value: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.VPC_DatabaseSgId
  PEERVPCDATABASESGID:
    Value: !GetAtt  GetInformationForVpcPeeringFunctionInvoke.PEER_VPC_DatabaseSgId


