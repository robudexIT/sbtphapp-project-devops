Parameters:
  VPCID: 
    Description: VPC of of where DbSubnetId belong
    Type: AWS::EC2::VPC::Id
  DBSUBNETID: 
    Description: Subnet of Database 
    Type: AWS::EC2::Subnet::Id
  # AssociationId: 
  #   Description: DBSubnet Route Assocation ID 
  #   Type: String

Resources:
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
            from __future__ import print_function
            import json
            import boto3
            import urllib3
            import cfnresponse

            SUCCESS = "SUCCESS"
            FAILED = "FAILED"

            http = urllib3.PoolManager()

            print('Loading function')
            client = boto3.client('ec2')

            def lambda_handler(event, context):
                print("Received event: " + json.dumps(event, indent=2))
                responseData={}
                try:
                    if event['RequestType'] == 'Delete':
                        print("Request Type:",event['RequestType'])
                        print("Delete Request - No Physical resources to delete")
                        cfnresponse.send(event, context, 'SUCCESS', {}, "CustomResourcePhysicalID")
                    elif event['RequestType'] == 'Create':
                        print("Request Type:",event['RequestType'])
                        VPCID=event['ResourceProperties']['VPCID']
                        DBSUBNETID=event['ResourceProperties']['DBSUBNETID']
                        # AssociationId=event['ResourceProperties']['AssociationId']
                        disable_dbsubnet_public(VPCID,DBSUBNETID)
                        responseData={'LOCKDOWN':True}
                        print(event)
                        print(responseData)
                        responseStatus = 'SUCCESS'
                        print("Sending response to custom resource")
                        cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
                    elif event['RequestType'] == 'Update':
                        print("Request Type:",event['RequestType'])
                        print(event)
                        VPCID=event['ResourceProperties']['VPCID']
                        DBSUBNETID=event['ResourceProperties']['DBSUBNETID']
                        # AssociationId=event['ResourceProperties']['AssociationId']
                        print("VPCID is :", VPCID)
                        disable_dbsubnet_public(VPCID,DBSUBNETID)
                        responseData={'LOCKDOWN':True}
                        print(responseData)
                        print("Sending response to custom resource")
                        responseStatus = 'SUCCESS'
                        print("responseStatus: " + responseStatus)
                        cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")
                except Exception as e:
                    print('Failed to process:', e)
                    responseStatus = 'FAILED'
                    responseData = {'Failure': 'Something bad happened.'}
                    cfnresponse.send(event, context, responseStatus, responseData, "CustomResourcePhysicalID")

            def disable_dbsubnet_public(VPCID, DBSUBNETID):
              client.modify_subnet_attribute(
                  MapPublicIpOnLaunch={
                      'Value': False
                  },
                  SubnetId=DBSUBNETID,

              )
            
              response = client.describe_route_tables(

                Filters = [
                    {
                    'Name': 'association.subnet-id',
                    'Values': [ DBSUBNETID ]
                    },
                    {
                      'Name': 'vpc-id',
                      'Values': [ VPCID ]
                    }
                ]
              )
              AssociationId = ""
              for rt in response['RouteTables']:
                 for rt_assoc in rt['Associations']:
                   if rt_assoc['SubnetId'] == DBSUBNETID :
                      AssociationId = rt_assoc['RouteTableAssociationId']
                      break

              # AssociationId = response['RouteTables'][0]['Associations'][0]['RouteTableAssociationId']
              #detach dbsubnet to publicRT
              client.disassociate_route_table(
                  AssociationId=AssociationId
                  
              )


              response = client.describe_route_tables(
                Filters = [
                    {
                    'Name': 'association.main',
                    'Values': [ 'true' ]
                    },
                    {
                      'Name': 'vpc-id',
                      'Values': [ VPCID ]
                    }
                ]
              )
   
              MainRTId = response['RouteTables'][0]['RouteTableId']

              client.associate_route_table(
                RouteTableId = MainRTId,
                SubnetId =DBSUBNETID,
              
              )


  Lambdatrigger:
    Type: 'Custom::RouteTableLambda'
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      VPCID: !Ref VPCID
      DBSUBNETID: !Ref DBSUBNETID 
      # AssociationId: !Ref AssociationId
     




