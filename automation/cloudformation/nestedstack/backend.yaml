Parameters:
  VPCID: 
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be valid VPC-id.
    Description: Select VPC ID

  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
    ConstraintDescription: must be valid EC2 InstanceType.
    Default: t2.micro 
    Description: EC2 Instance Type 
    Type: String 
  
  KeyName: 
    ConstraintDescription: must be the name of an existing EC2 Keypair 
    Description: Name of an existing Keypair to enable SSH access to the Instance
    Type: AWS::EC2::KeyPair::KeyName
  
  BackendPubSub01:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet of The Backend Server

  BackendPubSub02:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet of The Backend Server  

  BackendSg:
    Type: AWS::EC2::SecurityGroup::Id 
    Description: Security Gruop of Backend Instance   

  BackendELBSg:  
    Type: AWS::EC2::SecurityGroup::Id 
    Description: Security Gruop of Backend Instance   


  DBUsername:
      Description: Username for MySQL database access
      Type: String
      Default: admin
      MinLength: '1'
      MaxLength: '16'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
      NoEcho: 'true'
      Description: Password MySQL database access
      Type: String
      MinLength: '8'
      MaxLength: '41'
      AllowedPattern: '[a-zA-Z0-9]*'
      ConstraintDescription: must contain only alphanumeric characters.
      Default: supersecret
  DBHostAddress:
     Type: String
     Default: primarydbinstance.ctgivagolcpv.us-east-1.rds.amazonaws.com

  
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:427875724091:certificate/281e0766-5de3-4d4d-90bf-33b3144b4703

Mappings:
  AWSInstanceType2Arch:
    t2.micro:
       Arch: HVM64
    t2.medium:
      Arch: HVM64
  AWSRegionArch2AMI:
     us-east-1:
       HVM64: ami-0261755bbcb8c4a84
     us-east-2:
       HVM64: ami-0430580de6244e02e


Resources:
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: BackendLaunchTemplate
      VersionDescription: Version 1
      LaunchTemplateData:
        # IamInstanceProfile: 
        #  Name: !Ref InstanceProfileRole
        ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !Ref BackendSg
        # DB_HOST_IP=$(aws --region ${AWS::Region}  rds describe-db-instances --db-instance-identifier ${DBInstanceID} --query "DBInstances[0].Endpoint.Address")   
        UserData: 
           Fn::Base64: !Sub |
              #!/bin/bash
              sudo apt update -y

              sudo apt install apache2  php php-mysql mysql-client git -y
              sudo apt install awscli -y
              sudo systemctl enable apache2
              sudo systemctl stop apache2

              cd /tmp && git clone -b  lift-and-shift https://github.com/robudexIT/sbtphapp-project-devops.git
              cd /tmp/sbtphapp-project-devops


              DB_HOST_IP=${DBHostAddress}
              SBTPHAPP_USER=${DBUsername}
              SBTPHAPP_PWD=${DBPassword}
              DBName="sbtphappdb"

              check_query="SELECT SCHEMA_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME = '$DBName'"
              result=$(mysql -u "$SBTPHAPP_USER" -h "$DB_HOST_IP" -p"$SBTPHAPP_PWD" -e "$check_query"  -sN)


              if [ -n "$result" ]; then
                # Database already exists, so exit
                echo "Database '$DBName' already exists. Exiting the script."
        
              else

                # Database doesn't exist, so create it
                create_query="CREATE DATABASE $db_name"
                mysql -u "$SBTPHAPP_USER" -h "$DB_HOST_IP" -p"$SBTPHAPP_PWD" -e "$create_query"

                echo "Database '$DBName' has been created." 
                # Restore the database from the backup file
                mysql -u "$SBTPHAPP_USER" -h "$DB_HOST_IP" -p"$SBTPHAPP_PWD" "$DBName" < " /tmp/sbtphapp-project-devops/database/sbtphapp_db.sql"

                echo "Database '$DBName' has been restored."
              fi
              
              cp -r /tmp/sbtphapp-project-devops/backend/sbtph_api/ /var/www/html/

              sudo sed -i "s/[0-9]\+\(\.[0-9]\+\)\{3\}/$DB_HOST_IP/" /var/www/html/sbtph_api/config/database.php
              sudo sed -i "s/SBTPHAPP_USER_HERE/$SBTPHAPP_USER/" /var/www/html/sbtph_api/config/database.php
              sudo sed -i "s/SBTPHAPP_PWD_HERE/$SBTPHAPP_PWD/" /var/www/html/sbtph_api/config/database.php


              #change ownership to ubuntu user and apache2 group
              chown -R ubuntu:ubuntu /var/www/html

              sudo systemctl start apache2
              cd .. 
              sudo rm -rf /tmp/sbtphapp-project-devops

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      HealthCheckProtocol: HTTP 
      HealthCheckPath: /
      IpAddressType: ipv4 
      Name: BackendTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Tags: 
        - Key: Name 
          Value: BackendTargetGroup

  BackendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: BackendALB
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref BackendELBSg

      Subnets: 
        - !Ref BackendPubSub01 
        - !Ref BackendPubSub02 
      Tags: 
        - Key: Name 
          Value:  BackendALB 
      Type: application

  BackendElasticLoadBalancingListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !Ref CertificateArn
      DefaultActions: 
         - Type: forward 
           TargetGroupArn: !Ref BackendTargetGroup
        

      LoadBalancerArn: !Ref BackendALB
      Port: '443'
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
  
  BackendASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: BackendALB
    Properties: 
      AutoScalingGroupName:  BackendASG
      LaunchTemplate: 
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      # LoadBalancerNames: 
      #   - !Ref BackendALB
      TargetGroupARNs: 
       - !Ref  BackendTargetGroup
      HealthCheckType: ELB
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref BackendPubSub01
        - !Ref BackendPubSub02
      Tags: 
        - Key: Name 
          Value: BackendASG
          PropagateAtLaunch: true

Outputs:
  BackendALBDNSName:
    Description: DNSName of BackendALB 
    Value: !GetAtt BackendALB.DNSName




              



        