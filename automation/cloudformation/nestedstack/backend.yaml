Parameters:
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
    ConstraintDescription: must be valid EC2 InstanceType.
    Default: t2.micro 
    Description: EC2 Instance Type 
    Type: String 
  
  KeyName: 
    ConstraintDescription: must be the name of an existing EC2 Keypair 
    Description: Name of an existing Keypair to enable SSH access to the Instance
    Type: AWS::EC2::KeyPair::KeyName
  
  BackendSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet of The Backend Server

  BackendSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id 
    Description: Security Gruop of Backend Instance      

  InstanceProfileRole:
    Description: Role use by the ec2 instance in your behalf
    Type: String


Mappings:
  AWSInstanceType2Arch:
    t2.micro:
       Arch: HVM64
    t2.medium:
      Arch: HVM64
  AWSRegionArch2AMI:
     us-east-1:
       HVM64: ami-0261755bbcb8c4a84
     us-east-2:
       HVM64: ami-0430580de6244e02e


Resources:
  Backend: 
    Type: AWS::EC2::Instance
    CreationPolicy:
       ResourceSignal:
         Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets: 
          sbtphapp_backend_install:
            - install_apache2_and_other_dependencies
            - clone_sbtphapp_project_devops
            - configure_apache2
        
        install_apache2_and_other_dependencies:
          packages:
            apt: 
              apache2: []
              php: []
              php-mysql: []
              mysql-client: []
              git: []
              awscli: []
          services:
            sysvinit:
               apache2: 
                 enabled: "true" 
                 ensureRunning: "true" 
          # commands:
          #   01_enable_mariadb:
          #     command: sudo systemctl enable mariadb
          #   02_start_mariadb:
          #     command: sudo systemctl start mariadb
          
        clone_sbtphapp_project_devops:
          commands:
            01_clone_repo:
              command: cd /tmp && git clone -b  lift-and-shift https://github.com/robudexIT/sbtphapp-project-devops.git

        configure_apache2:
          files:
            /home/ubuntu/update_db_ip.sh:
              content: !Sub |
                #!/bin/bash

                REGION="AWS_REGION_HERE"
                #get the private ip address of the Instance Name=Database
                AWS_DB_HOST_IP=$(aws --region $REGION ec2 describe-instances --filters "Name=tag:Server,Values=Database" --query 'Reservations[0].Instances[0].PrivateIpAddress' | sed 's/"//g') 

                if [ "$AWS_DB_HOST_IP" == "null" ]; then
                    exit 0
                fi
                CUR_DB_HOST_IP=$(grep -E -o '([0-9]{1,3}\.){3}[0-9]{1,3}' /var/www/html/sbtph_api/config/database.php)
                if [ "$CUR_DB_HOST_IP" = "$AWS_DB_HOST_IP" ]; then 
                    exit 0
                else {    
                    sudo sed -i "s/[0-9]\+\(\.[0-9]\+\)\{3\}/$AWS_DB_HOST_IP/" /var/www/html/sbtph_api/config/database.php
                    #back the ownership to  ubuntu user and group
                    chown -R ubuntu:ubuntu /var/www/html/sbtph_api/config/database.php
                    }
                fi
              mode: "777"
              user: "ubuntu"
              group: "ubuntu"
              
            /tmp/backend.sh:
              content: !Sub |
                #!/bin/bash -xe
                 #get the private ip address of the Instance Name=Database
                DB_HOST_IP=$(aws --region ${AWS::Region} ec2 describe-instances --filters "Name=tag:Server,Values=Database" --query 'Reservations[0].Instances[0].PrivateIpAddress' | sed 's/"//g') 


                cp -r /tmp/sbtphapp-project-devops/backend/sbtph_api/ /var/www/html/

                if [ "$DB_HOST_IP" -ne "null"]; then
                    sudo sed -i "s/[0-9]\+\(\.[0-9]\+\)\{3\}/$DB_HOST_IP/" /var/www/html/sbtph_api/config/database.php
                fi

                #change ownership to ubuntu user and apache2 group
                chown -R ubuntu:ubuntu /var/www/html

               
                #update region in update_db_ip.sh
                sudo sed -i "s/AWS_REGION_HERE/${AWS::Region}/" /home/ubuntu/update_db_ip.sh

                chown -R ubuntu:ubuntu /home/ubuntu/update_db_ip.sh
                chmod +x /home/ubuntu/update_db_ip.sh

                cp /tmp/sbtphapp-project-devops/backend/startup-service/update_db_ip.service /etc/systemd/system/

                sudo systemctl daemon-reload
                sudo systemctl enable update_db_ip.service
                sudo systemctl start update_db_ip.service

                cp /tmp/sbtphapp-project-devops/backend/cron/update_db_ip.crontab /tmp/

                # Install the updated crontab
                crontab /tmp/update_db_ip.crontab

                # Remove the temporary file
                rm /tmp/update_db_ip.crontab

                cd .. 
                sudo rm -rf /tmp/sbtphapp-project-devops

              group: root 
              mode: '777'
              owner: root 

          commands: 
            01_run_database_shell_script:
              command: /tmp/backend.sh            
                
       
    Properties: 
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfileRole
      Tags: 
        - Key: Server 
          Value: Backend
        - Key: Name 
          Value: Backend
      SubnetId: !Ref BackendSubnetId
      SecurityGroupIds: 
        - !Ref BackendSecurityGroupID
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          apt update  -y 
          sudo apt-get -y install python3-pip
          mkdir -p /opt/aws/
          sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource Backend --configsets sbtphapp_backend_install --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Backend --region ${AWS::Region}

        


      



        