Parameters:
  VPCID: 
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be valid VPC-id.
    Description: Select VPC ID

  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.medium
    ConstraintDescription: must be valid EC2 InstanceType.
    Default: t2.micro 
    Description: EC2 Instance Type 
    Type: String 
  
  KeyName: 
    ConstraintDescription: must be the name of an existing EC2 Keypair 
    Description: Name of an existing Keypair to enable SSH access to the Instance
    Type: AWS::EC2::KeyPair::KeyName
  
  FrontendPubSub01:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet of The Frontend Server

  FrontendPubSub02:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet of The Frontend Server  

  FrontendSg:
    Type: AWS::EC2::SecurityGroup::Id 
    Description: Security Gruop of Frontend Instance   

  FrontendELBSg:  
    Type: AWS::EC2::SecurityGroup::Id 
    Description: Security Gruop of Frontend Instance   

  BackendAPIhttps:
    Type: String 
    Description: Backend Secure Domain Name  

  FrontendSubdomain:
    Type: String
  
  RegisteredDomainName:
    Type: String

  
 
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:427875724091:certificate/281e0766-5de3-4d4d-90bf-33b3144b4703

Mappings:
  AWSInstanceType2Arch:
    t2.micro:
       Arch: HVM64
    t2.medium:
      Arch: HVM64
  AWSRegionArch2AMI:
     us-east-1:
       HVM64: ami-0261755bbcb8c4a84
     us-east-2:
       HVM64: ami-0430580de6244e02e


Resources:
  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: FrontendLaunchTemplate
      VersionDescription: Version 1
      LaunchTemplateData:
        ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch, !Ref InstanceType, Arch]]
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !Ref FrontendSg
        # DB_HOST_IP=$(aws --region ${AWS::Region}  rds describe-db-instances --db-instance-identifier ${DBInstanceID} --query "DBInstances[0].Endpoint.Address")   
        UserData: 
           Fn::Base64: !Sub |
              #!/bin/bash
              sudo apt update -y

              sudo apt install apache2  php php-mysql mysql-client git -y
              sudo apt install awscli -y
              sudo systemctl enable apache2
              sudo systemctl start apache2

              cd /tmp && git clone -b  lift-and-shift https://github.com/robudexIT/sbtphapp-project-devops.git
              #get the public ip address of the BackendALBDNSName
              AWS_API_IP=${BackendAPIhttps}


              cp -r /tmp/sbtphapp-project-devops/frontend/sbtph_app/ /var/www/html/


              #find /var/www/html/sbtph_app/js/app* -type f -exec sed -E -i "s/\b([0-9]{1,3}\.){3}[0-9]{1,3}\b/$AWS_API_IP/g" {} +
              find /var/www/html/sbtph_app/js/app* -type f -exec sed -E -i "s#\bhttp://([0-9]{1,3}\.){3}[0-9]{1,3}\b#$AWS_API_IP#g" {} +


              sudo chown -R ubuntu:ubuntu /var/www/html

              #this code will deal on SPA application 
              mv /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/000-default.conf-backup
              cp  /tmp/sbtphapp-project-devops/frontend/conf/apache2/000-default.conf /etc/apache2/sites-available/
              sudo a2enmod rewrite
              sudo systemctl restart apache2

              sudo rm -rf  /tmp/sbtphapp-project-devops 


  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPCID
      HealthCheckProtocol: HTTP 
      HealthCheckPath: /
      IpAddressType: ipv4 
      Name: FrontendTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Tags: 
        - Key: Name 
          Value: FrontendTargetGroup

  FrontendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: FrontendALB
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref FrontendELBSg

      Subnets: 
        - !Ref FrontendPubSub01 
        - !Ref FrontendPubSub02 
      Tags: 
        - Key: Name 
          Value:  FrontendALB 
      Type: application

  FrontendElasticLoadBalancingListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates: 
        - CertificateArn: !Ref CertificateArn
      DefaultActions: 
         - Type: forward 
           TargetGroupArn: !Ref FrontendTargetGroup
        

      LoadBalancerArn: !Ref FrontendALB
      Port: '443'
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
  
  FrontendASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: FrontendALB
    Properties: 
      AutoScalingGroupName:  FrontendASG
      LaunchTemplate: 
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      # LoadBalancerNames: 
      #   - !Ref BackendALB
      TargetGroupARNs: 
       - !Ref  FrontendTargetGroup
      HealthCheckType: ELB
      MaxSize: '1'
      MinSize: '1'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        - !Ref FrontendPubSub01
        - !Ref FrontendPubSub02
      Tags: 
        - Key: Name 
          Value: FrontendASG
          PropagateAtLaunch: true

Outputs:
  FrontendALBDNSName:
    Description: DNSName of FrontendALB 
    Value: !GetAtt FrontendALB.DNSName

  FrontendAPIhttps: 
    Description: Frontend Secure Domain Name
    Value: !Sub https://${FrontendSubdomain}.${RegisteredDomainName}
  




              



        