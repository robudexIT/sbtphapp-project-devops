Parameters:
  LambdaSg: 
    Description: Security Grup us by lambda
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-0fcb7b2befd2cfc18
  LambdaSubnet: 
    Description: Subnet use by lambda 
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0921b5419355cd4a4 
  DbUsername:
      Description: Username for MySQL database access
      Type: String
      Default: admin
      MinLength: '1'
      MaxLength: '16'
      AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
      ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DbPassword:
      NoEcho: 'true'
      Default: supersecret
      Description: Password MySQL database access
      Type: String
      MinLength: '8'
      MaxLength: '41'
      AllowedPattern: '[a-zA-Z0-9]*'
      ConstraintDescription: must contain only alphanumeric characters.
  DbHost:
      Description: RDS Instance DNS 
      Default: primarydbinstance.ctgivagolcpv.us-east-1.rds.amazonaws.com
      Type: String
  GitHubRepoURL: 
      Description: GitHub Url where the backup copy of the database reside 
      Default: https://github.com/robudexIT/sbtphapp-project-devops
      Type: String 
  DbFilePath:
     Description: Database file path of the of the github repo 
     Default: database/sbtphapp_db.sql
     Type: String 

  
  # AssociationId: 
  #   Description: DBSubnet Route Assocation ID 
  #   Type: String

Resources:
  LambdaIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow 
                Action: 
                  - 's3:GetObject'
                Resource: '*'  
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
  RestoreDbLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.9
      Timeout: 60
      VpcConfig:
        SecurityGroupIds: 
          - !Ref LambdaSg
        SubnetIds:
         - !Ref LambdaSubnet
      Code:
        S3Bucket: robudex-cf-templates
        S3Key: restoredb.zip



  LambdaRestoreDbInvoke:
    Type: 'Custom::RouteTableLambda'
    Properties:
      ServiceToken: !GetAtt RestoreDbLambdaFunction.Arn
      DbUsername: !Ref DbUsername
      DbPassword: !Ref DbPassword
      DbHost: !Ref DbHost
      GitHubRepoURL: !Ref GitHubRepoURL
      DbFilePath: !Ref DbFilePath

     
      # AssociationId: !Ref AssociationId
     

