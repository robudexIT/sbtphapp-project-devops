Parameters:
  VpcName: 
    Description: Specifiy vpc name 
    Type: String 
  # AZList:
  #   Type: List<AWS::EC2::AvailabilityZone::Name>
  #   Description: List of availability zone 

  SSHLocation: 
     AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2}) 
     ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
     Default: 0.0.0.0/0
     Description: The IP address or group of IP Address that allowed to access EC2 Instance
     MaxLength: '18'
     MinLength: '9'
     Type: String


Mappings:
   AWSVPCCIDRBLOCK:
     us-east-1: 
       CidrBlock: 192.168.0.0/16 
     us-east-2: 
       CidrBlock: 172.16.0.0/16

   VPCSubnet: 
     us-east-1:
       a : 192.168.1.0/24 
       b : 192.168.2.0/24
       c : 192.168.10.0/24
       d:  192.168.11.0/24
       e:  192.168.50.0/24
       f: 192.168.51.0/24

     us-east-2:
       a : 172.16.1.0/24 
       b : 172.16.2.0/24
       c : 172.16.50.0/24     
      
Conditions:
  Region1CreateResources: !Equals 
    - !Ref AWS::Region   
    - us-east-1
  Region2CreateResources: !Equals 
    - !Ref AWS::Region   
    - us-east-2
Resources:
  SBTPHAPPVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [ AWSVPCCIDRBLOCK, !Ref 'AWS::Region', CidrBlock ]
      EnableDnsHostnames: true 
      EnableDnsSupport: true  
      Tags:
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name 
          Value: !Ref VpcName 

  SBTPHAPPIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name 
          Value: SBTPHAPPIGW


  SBTPHAPPGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment  
    Properties:
      InternetGatewayId: !Ref SBTPHAPPIGW
      VpcId: !Ref SBTPHAPPVPC
  
  SBTPHAPPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SBTPHAPPVPC
      Tags:
        - Key: Name 
          Value: SBTPHAPPublicRT

  SBTPHAPPrvlicRT:
    Type: AWS::EC2::RouteTable 
    Condition:  Region1CreateResources
    Properties:
      VpcId: !Ref SBTPHAPPVPC
      Tags: 
       - Key: Name  
         Value: SBTPHAPPrvlicRT
  
  RouteToInternet:
    Type: AWS::EC2::Route 
    DependsOn: SBTPHAPPIGW 
    Properties:
      RouteTableId: !Ref SBTPHAPPublicRT 
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref SBTPHAPPIGW 

  FrontendPub01SubRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition:  Region1CreateResources
    Properties:
      SubnetId: !Ref FrontendPubSub01
      RouteTableId: !Ref SBTPHAPPublicRT 

  FrontendPub02SubRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition:  Region1CreateResources
    Properties:
      SubnetId: !Ref FrontendPubSub02
      RouteTableId: !Ref SBTPHAPPublicRT 
  
  BackendPub01SubRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition:  Region1CreateResources
    Properties:
      SubnetId: !Ref BackendPubSub01
      RouteTableId: !Ref SBTPHAPPublicRT

  BackendPub02SubRTAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition:  Region1CreateResources
    Properties:
      SubnetId: !Ref BackendPubSub02
      RouteTableId: !Ref SBTPHAPPublicRT


  FrontendPubSub01: 
    Type: AWS::EC2::Subnet 
    Condition:  Region1CreateResources
    Properties:
      AvailabilityZone: !Select 
        - 0 
        - Fn::GetAZs: !Ref 'AWS::Region'

      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', a]
      MapPublicIpOnLaunch: true
      VpcId: !Ref SBTPHAPPVPC
      Tags:
        - Key: Name 
          Value: FrontendPubSub01

  FrontendPubSub02: 
    Type: AWS::EC2::Subnet 
    Condition:  Region1CreateResources
    Properties:
      AvailabilityZone: !Select 
        - 1 
        - Fn::GetAZs: !Ref 'AWS::Region'

      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', b]
      MapPublicIpOnLaunch: true
      VpcId: !Ref SBTPHAPPVPC
      Tags:
        - Key: Name 
          Value: FrontendPubSub02        

  BackendPubSub01: 
    Type: AWS::EC2::Subnet 
    Condition:  Region1CreateResources
    Properties:
      AvailabilityZone: !Select 
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', c]
      MapPublicIpOnLaunch: true
      VpcId: !Ref SBTPHAPPVPC
      Tags: 
        - Key: Name 
          Value: BackendPubSub01
  
  BackendPubSub02: 
    Type: AWS::EC2::Subnet 
    Condition:  Region1CreateResources
    Properties:
      AvailabilityZone: !Select 
        - 3
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', d]
      MapPublicIpOnLaunch: true
      VpcId: !Ref SBTPHAPPVPC
      Tags: 
        - Key: Name 
          Value: BackendPubSub02


  DatabasePrivSub01: 
    Type: AWS::EC2::Subnet 
    Condition:  Region1CreateResources
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - 4
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', e]
      MapPublicIpOnLaunch: false
      VpcId: !Ref SBTPHAPPVPC
      Tags: 
        - Key: Name 
          Value: DatabasePrivSub01

  DatabasePrivSub02: 
    Condition:  Region1CreateResources
    Type: AWS::EC2::Subnet 
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - 5
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', f]
      MapPublicIpOnLaunch: false
      VpcId: !Ref SBTPHAPPVPC
      Tags: 
        - Key: Name 
          Value: DatabasePrivSub02

  DatabasePrivSubReplica01: 
    Condition:  Region2CreateResources
    Type: AWS::EC2::Subnet 
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', a]
      MapPublicIpOnLaunch: false
      VpcId: !Ref SBTPHAPPVPC
      Tags: 
        - Key: Name 
          Value: DatabasePrivSubReplica01
          
  DatabasePrivSubReplica02: 
    Condition:  Region2CreateResources
    Type: AWS::EC2::Subnet 
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !FindInMap [VPCSubnet, !Ref 'AWS::Region', b]
      MapPublicIpOnLaunch: false
      VpcId: !Ref SBTPHAPPVPC
      Tags: 
        - Key: Name 
          Value: DatabasePrivSubReplica02        

  DBSubnetGroupRegion1: 
    Condition:  Region1CreateResources
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet For RDS Instance
      DBSubnetGroupName: DBSubnetGroupRegion1
      SubnetIds: 
        - !Ref  DatabasePrivSub01
        - !Ref  DatabasePrivSub02
      Tags: 
        - Key: Name 
          Value:  DBSubnetGroupRegion1

  DBSubnetGroupRegion2: 
    Condition:  Region2CreateResources
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Subnet For RDS Instance
      DBSubnetGroupName:  DBSubnetGroupRegion2
      SubnetIds: 
        - !Ref  DatabasePrivSubReplica01
        - !Ref  DatabasePrivSubReplica02
      Tags: 
        - Key: Name 
          Value:  DBSubnetGroupRegion2
      
  FrontendSgToItself:
    Type: AWS::EC2::SecurityGroupIngress
    Condition:  Region1CreateResources
    Properties:
      Description: Allowed All Traffic From FrontendSg to Itself
      SourceSecurityGroupId: !Ref FrontendSg 
      GroupId: !Ref FrontendSg 
      IpProtocol: -1 

  BackendSgToItself:
    Type: AWS::EC2::SecurityGroupIngress
    Condition:  Region1CreateResources
    Properties:
      Description: Allowed All Traffic From  BackendSg to Itself
      SourceSecurityGroupId: !Ref BackendSg 
      GroupId: !Ref BackendSg 
      IpProtocol: -1 

  DatabaseSgToItself:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allowed All Traffic From  DatabaseSg to Itself
      SourceSecurityGroupId: !Ref DatabaseSg 
      GroupId: !Ref DatabaseSg  
      IpProtocol: -1 

  DatabaseSg:  
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupDescription: "Enable mariadb access via 3306 from the backend-Sg source. And allow ssh access on my IP address as a source"
      VpcId: !Ref SBTPHAPPVPC
      SecurityGroupIngress: 
        - CidrIp: !Ref SSHLocation
          FromPort: 22
          IpProtocol: tcp  
          ToPort: 22 
      Tags:
        - Key: Name 
          Value: DatabaseSg

  DatabaseSgAlSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition:  Region1CreateResources
    Properties: 
      Description: String
      FromPort: 3306
      GroupId: !Ref DatabaseSg
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref BackendSg
      ToPort: 3306

  
  BackendSg:  
    Type: AWS::EC2::SecurityGroup 
    Condition:  Region1CreateResources
    Properties:
      GroupDescription: "Enable mariadb access via 3306 from the backend-Sg source. And allow ssh access on my IP address as a source"
      VpcId: !Ref SBTPHAPPVPC
      SecurityGroupIngress: 
        - CidrIp: !Ref SSHLocation
          FromPort: 22
          IpProtocol: tcp  
          ToPort: 22 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp  
          ToPort: 80
      Tags: 
        - Key: Name 
          Value: BackendSg   

  FrontendSg:  
    Type: AWS::EC2::SecurityGroup 
    Condition:  Region1CreateResources
    Properties:
      GroupDescription: "Enable mariadb access via 3306 from the backend-Sg source. And allow ssh access on my IP address as a source"
      VpcId: !Ref SBTPHAPPVPC
      SecurityGroupIngress: 
        - CidrIp: !Ref SSHLocation
          FromPort: 22
          IpProtocol: tcp  
          ToPort: 22 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp  
          ToPort: 80
      Tags:
        - Key: Name 
          Value: FrontendSg

  FrontendELBSg:  
    Type: AWS::EC2::SecurityGroup 
    Condition:  Region1CreateResources
    Properties:
      GroupDescription: "Enable Outside World to Access ELB port 80 and 443"
      VpcId: !Ref SBTPHAPPVPC
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp  
          ToPort: 80 
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp  
          ToPort: 443 
      Tags:
        - Key: Name 
          Value: FrontendELBSg

  BackendELBSg:  
    Type: AWS::EC2::SecurityGroup 
    Condition:  Region1CreateResources
    Properties:
      GroupDescription: "Allow FrontendELB to ACCESS port 80"
      VpcId: !Ref SBTPHAPPVPC
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp  
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp  
          ToPort: 443  
      Tags:
        - Key: Name 
          Value: BackendELBSg

  
Outputs:
  VPCID: 
    Value: !Ref SBTPHAPPVPC
  DatabaseSg: 
    Value: !Ref DatabaseSg
  BackendSg: 
    Condition:  Region1CreateResources
    Value: !Ref BackendSg
  FrontendSg:
    Condition:  Region1CreateResources 
    Value: !Ref FrontendSg
  DBSubnetGroupRegion1:
     Condition:  Region1CreateResources
     Value: !Ref DBSubnetGroupRegion1
  DBSubnetGroupRegion2:
     Condition:  Region2CreateResources   
     Value: !Ref DBSubnetGroupRegion2
  # BackendPubSub: 
  #   Value: !Ref BackendPubSub 
  # FrontendPubSub: 
  #   Value: !Ref FrontendPubSub 
  # DatabasePrivSub:
  #   Value: !Ref DatabasePrivSub
  


